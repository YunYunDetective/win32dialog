Plugins.link("win32dialog.dll");

class WIN32DialogEX extends WIN32Dialog {
	// コンストラクタ
	function WIN32DialogEX(owner) { super.WIN32Dialog((typeof owner == "Object") ? owner : null); }

	// テンプレート情報保持用クラス
	var Header = global.WIN32Dialog.Header;
	var Items  = global.WIN32Dialog.Items;

	var itemMap   = %[];
	var itemNames = [];

	property dm { getter { return global.Debug.message; } }

	// テンプレートを流し込む
	function store(elm) {
		if (typeof elm != 'Object') return false;

		var head = new Header();
		var items = [];
		var cnt = 0, n = (typeof elm.items == "Object") ? elm.items.count : 0;

		head.store(elm);
		for (var i = 0; i < n; i++) {
			if (typeof elm.items[i] != 'Object') continue;
			var tmp = %[];
			(global.Dictionary.assign incontextof tmp)(elm.items[i], true);

			// パラメータのエイリアス
			makeAlias(tmp, "id", "ID");
			makeAlias(tmp, "cx", "w");
			makeAlias(tmp, "cy", "h");
			makeAlias(tmp, "windowClass", "class");

			var origID;
			switch (typeof tmp.id) {
			case "String":
				tmp.id = bindNewID(origID = tmp.id); // 文字列のIDは数値に置き換える
				break;
			case "Integer":
				origID = tmp.id;
				break;
			default:
				tmp.id = -1;
				break;
			}
			dm(i, origID);
			if (origID != '') {
				if (typeof itemMap[origID] == "undefined") itemNames.add(origID);
				else if (!tmp.multipleid) throw new Exception(@"IDが重複しています: ${origID}");
				itemMap[origID] = tmp;
			}

//			switch (tmp.windowClass) {
//			}

			var item = new Items();
			items.add(item);
			item.store(tmp);
			cnt++;
		}
		head.dlgItems = cnt;

		makeTemplate(head, items*);

		invalidate head;
		for (var i = 0; i < cnt; i++) invalidate items[i];
	}

	// エイリアス生成
	function makeAlias(dict, orig, alias) {
		if (typeof dict[alias] != "undefined" && typeof tmp[orig] == "undefined") {
			tmp[orig] = tmp[alias];
			delete tmp[alias];
		}
	}

	// 初期パラメータを設定する
	function onInit() {
		super.onInit(...);
		for (var i = 0; i < itemNames.count; i++) {
			var name = itemNames[i];
			var item = itemMap[i];
//			switch ()
		}
	}

	function onCommand(msg, wp, lp) {
		super.onCommand(...);
		switch (wp) {
		case IDOK:
		case IDCANCEL:
		case IDABORT:
			close(wp);
			return true;
		}
	}

	function Control(text, id, wndcls, style, x, y, width, height, exStyle = 0) {
		return %[ windowClass:wndcls, x:x, y:y, cx:width, cy:height, title:text, style:style|WS_VISIBLE, exStyle:exStyle, id:id ];
	}

	var BUTTON = 0x80, STATIC = 0x82, EDIT = "EDIT", LISTBOX = "LISTBOX", COMBOBOX = "COMBOBOX", SCROLLBAR = "SCROLLBAR";

	// 各種テンプレートを生成する関数

	// ボタン系列
	function DefPushButton(  text, id,    x, y, w, h, style=WS_TABSTOP, ex=0) { return Control(text, id, BUTTON, style|BS_DEFPUSHBUTTON,   x, y, w, h, ex); }
	function    PushButton(  text, id,    x, y, w, h, style=WS_TABSTOP, ex=0) { return Control(text, id, BUTTON, style|BS_PUSHBUTTON,      x, y, w, h, ex); }
	function AutoCheckBox(   text, id,    x, y, w, h, style=WS_TABSTOP, ex=0) { return Control(text, id, BUTTON, style|BS_AUTOCHECKBOX,    x, y, w, h, ex); }
	function     CheckBox(   text, id,    x, y, w, h, style=WS_TABSTOP, ex=0) { return Control(text, id, BUTTON, style|BS_CHECKBOX,        x, y, w, h, ex); }
	function AutoRadioButton(text, id,    x, y, w, h, style=WS_TABSTOP, ex=0) { return Control(text, id, BUTTON, style|BS_AUTORADIOBUTTON, x, y, w, h, ex); }
	function     RadioButton(text, id,    x, y, w, h, style=WS_TABSTOP, ex=0) { return Control(text, id, BUTTON, style|BS_RADIOBUTTON,     x, y, w, h, ex); }
	function GroupBox(       text, id=-1, x, y, w, h, style=0,          ex=0) { return Control(text, id, BUTTON, style|BS_GROUPBOX,        x, y, w, h, ex); }

	// スタティック系列
	function LText(          text, id,    x, y, w, h, style=WS_GROUP,   ex=0) { return Control(text, id, STATIC, style|SS_LEFT,            x, y, w, h, ex); }
	function CText(          text, id,    x, y, w, h, style=WS_GROUP,   ex=0) { return Control(text, id, STATIC, style|SS_CENTER,          x, y, w, h, ex); }
	function RText(          text, id,    x, y, w, h, style=WS_GROUP,   ex=0) { return Control(text, id, STATIC, style|SS_RIGHT,           x, y, w, h, ex); }
	function Icon(           text, id,    x, y, w, h, style=0,          ex=0) { return Control(text, id, STATIC, style|SS_ICON,            x, y, 0, 0, ex); } // w,h は無視される

	// エディット系列 EDITTEXT, BEDIT, HEDIT, or IEDIT. 
	function EditText(             id,    x, y, w, h, style=ES_LEFT|WS_BORDER|WS_TABSTOP, ex=0) { return Control(, id, EDIT,      style, x, y, w, h, ex); } // ES_*,  WS_TABSTOP, WS_GROUP, WS_VSCROLL, WS_HSCROLL, WS_DISABLED
	// リストボックス系列
	function ListBox(              id,    x, y, w, h, style=LBS_NOTIFY|WS_BORDER,         ex=0) { return Control(, id, LISTBOX,   style, x, y, w, h, ex); } // LBS_*, WS_BORDER, WS_VSCROLL
	// コンボボックス系列
	function ComboBox(             id,    x, y, w, h, style=CBS_DROPDOWN|WS_TABSTOP,      ex=0) { return Control(, id, COMBOBOX,  style, x, y, w, h, ex); } // CBS_*, WS_TABSTOP, WS_GROUP, WS_VSCROLL, WS_DISABLED


	// スクロールバー系列
}


